; This command tells Zeus where to put the code it generates. As a szx file... Alter the path to suit your system

 zeusemulate "48K"
 output_szx "spi.szx",32768,START     ; The szx file

; output_bin "c:\spi.bin",$0000,$10000    ; The binary file ; If for some reason you want binary, uncomment this line
 ORG 32768

; todo - player graphic - exit graphic
; todo - copy temp map to map

BOULDER         EQU %0001
DIAMOND         EQU %0010
AMOEBA          EQU %0100
WALL            EQU %0110
TITANIUM        EQU %1001
BUTTERFLY       EQU %1010
FIREFLY         EQU %1100
EXIT            EQU %1111
PLAYER          EQU %0011
GROUND          EQU %0101
SPACE           EQU %0000

SCREEN          EQU 16384

ATTRIB          EQU 22528
ATTRIB_ROW      EQU 24
ATTRIB_COLUMN   EQU 32
ATTRIB_SIZE     EQU ATTRIB_ROW*ATTRIB_COLUMN

MAP_ROW         EQU 22
MAP_COLUMN      EQU 40
MAP_SIZE        EQU MAP_ROW*MAP_COLUMN

BD      EQU BOULDER
DM      EQU DIAMOND
AM      EQU AMOEBA
WL      EQU WALL
TW      EQU TITANIUM
X      EQU BUTTERFLY
G      EQU FIREFLY
ET      EQU EXIT
PL      EQU PLAYER
GR      EQU GROUND
S      EQU SPACE

START
 DI                      ; interrupts off
 LD SP,MEMTOP            ; set stack to end

 LD HL,ATTRIB            ; attr start                             ; Clear the attributes
 LD DE,ATTRIB+1          ; sttr start +1
 LD BC,ATTRIB_SIZE-1     ; attr size -1
 LD (HL),7               ; clear first attr to white
 LDIR                    ; copy

 CALL CLEAR_KEYBOARD_BUFFER

 CALL DRAW_MAP_FULL
 CALL DRAW_MAP

 LD A,3         ; bottom three bits of A contain the border color
 OUT (254),A

MAIN_LOOP
 CALL V_BLANK

 LD A,4         ; bottom three bits of A contain the border color
 OUT (254),A

 CALL UPDATE_TIMERS
 CALL MOVE_PLAYER
 CALL CHECK_MAP


 LD A,3         ; bottom three bits of A contain the border color
 OUT (254),A

 CALL KEYBOARD
JP MAIN_LOOP

CLEAR_KEYBOARD_BUFFER
 LD B,250
CKB_LOOP
  PUSH BC
  CALL V_BLANK
  CALL KEYBOARD
  POP BC
 DJNZ CKB_LOOP
RET

UPDATE_TIMERS

 LD A, (PLAYER_TIMER+1)
 DEC A
 JP P, UPDATE_TIMER_PLAYER
PLAYER_SPEED
  LD A, 15 ; modified
UPDATE_TIMER_PLAYER
 LD (PLAYER_TIMER+1), A

 LD A, (BOULDER_TIMER+1)
 DEC A
 JP P, UPDATE_TIMER_BOULDER
BOULDER_SPEED
  LD A, 15 ; modified
UPDATE_TIMER_BOULDER
 LD (BOULDER_TIMER+1), A

 LD A, (DIAMOND_TIMER+1)
 DEC A
 JP P, UPDATE_TIMER_DIAMOND
DIAMOND_SPEED
  LD A, 7 ; modified
UPDATE_TIMER_DIAMOND
 LD (DIAMOND_TIMER+1), A

 LD A, (AMOEBA_TIMER+1)
 DEC A
 JP P, UPDATE_TIMER_AMOEBA
AMOEBA_SPEED
  LD A, 31 ; modified
UPDATE_TIMER_AMOEBA
 LD (AMOEBA_TIMER+1), A

RET

MOVE_PLAYER

PLAYER_TIMER
 LD A, #1 ;(PLAYER_TIME) ; modified
 OR A
 JP NZ, MOVE_PLAYER_EXIT ; timer hasnt counted down

  CALL KEYBOARD

  LD A, (DIR_H)
  OR A
  JP Z, PLAYER_H_NO_MOVE

   LD H, A              ; backup direction h

   LD A, (PLAYER_V)     ; unchanged player v
   LD L, A

   LD A, (PLAYER_H)
   LD B, A              ; old player h
   ADD A, H
   LD C, A              ; new player h

   LD H, HIGH MAPHI ; SCREEN CHAR HI
   LD D,(HL) ; T7 ; GET HI BYTE
   LD H, HIGH MAPLO ; SCREEN CHAR LO
   ADD A,(HL) ; T7 ; GET LO BYTE
   JP NC, PLAYER_H_CONT
   INC D
PLAYER_H_CONT
   LD E,A

   LD A,(DE)
   CP WALL
   JP Z, MOVE_PLAYER_EXIT
   CP TITANIUM
   JP Z, MOVE_PLAYER_EXIT
   CP BOULDER
   JP Z, MOVE_PLAYER_EXIT
   CP AMOEBA
   JP Z, MOVE_PLAYER_EXIT
   CP BUTTERFLY ; dead
   JP Z, MOVE_PLAYER_EXIT
   CP FIREFLY   ; dead
   JP Z, MOVE_PLAYER_EXIT
   CP EXIT      ; check if open
   JP Z, MOVE_PLAYER_EXIT

   LD A, C
   LD (PLAYER_H), A

   LD IXL,A
   LD A, L ; player v
   LD IXH,A
   LD A, PLAYER
   EXX
   CALL DRAW_CHAR

   EXX
   LD IXL,B ; ixh already set
   OR A ; SPACE
   CALL DRAW_CHAR

RET

PLAYER_H_NO_MOVE

  LD A, (DIR_V)
  OR A
  JP Z, MOVE_PLAYER_EXIT

   LD H, A              ; backup direction v

   LD A, (PLAYER_H)     ; unchanged player h
   LD C, A

   LD A,(PLAYER_V)
   LD B, A              ; old player v
   ADD A, H
   LD L, A             ; new player v

   LD H, HIGH MAPHI ; SCREEN CHAR HI
   LD D,(HL) ; T7 ; GET HI BYTE
   LD H, HIGH MAPLO ; SCREEN CHAR LO
   LD A,(HL) ; T7 ; GET LO BYTE
   ADD A, C
   JP NC, PLAYER_V_CONT
   INC D
PLAYER_V_CONT
   LD E,A

   LD A,(DE)
   CP WALL
   JP Z, MOVE_PLAYER_EXIT
   CP TITANIUM
   JP Z, MOVE_PLAYER_EXIT
   CP BOULDER
   JP Z, MOVE_PLAYER_EXIT
   CP AMOEBA
   JP Z, MOVE_PLAYER_EXIT
   CP BUTTERFLY ; dead
   JP Z, MOVE_PLAYER_EXIT
   CP FIREFLY   ; dead
   JP Z, MOVE_PLAYER_EXIT
   CP EXIT      ; if open
   JP Z, MOVE_PLAYER_EXIT

   LD A, L
   LD (PLAYER_V), A

   LD IXH,A
   LD IXL,C
   LD A, PLAYER
   EXX
   CALL DRAW_CHAR

   EXX
   LD IXH,B ; ixl already set
   OR A ; SPACE
   CALL DRAW_CHAR

MOVE_PLAYER_EXIT
RET

CHECK_MAP
 LD HL, MAP20+38

 LD B,20
CM_V_LOOP ; loop 22 times using b - 21 to 0
  LD C,B ; backup ver
  PUSH BC
  LD B,38 ; reset hor

CM_H_LOOP ; loop 38 times using b - 39 to 0
   LD A,(hl)
   OR A
   JP PE, CM_CONT

    CP BOULDER
    JP NZ, AMOEBA_CHECK ; not a boulder

 ex af,af' ; backup object
BOULDER_TIMER
     LD A, #1 ;(BOULDER_TIME) ; modified
     OR A
     JP NZ, CM_CONT ; timer hasnt counted down

; its a boulder
      JP DIAMOND_BOULDER_MOVEMENT

AMOEBA_CHECK
    CP AMOEBA
    JP NZ, DIAMOND_CHECK ; not an amoeba

AMOEBA_TIMER
     LD A, #1 ; modified
     OR A
     JP NZ, CM_CONT ; timer hasnt counted down

; its an amoeba
      LD A,2
      OUT (254),A
      LD A,4
      OUT (254),A
      JP CM_CONT

DIAMOND_CHECK
 ex af,af' ; backup object

DIAMOND_TIMER ; must be a diamond
     LD A, #1 ; modified
     OR A
     JP NZ, CM_CONT ; timer hasnt counted down

; its a diamond or boulder
DIAMOND_BOULDER_MOVEMENT
  CALL DIAMOND_BOULDER_MOVE

CM_CONT
   DEC hl
   DJNZ CM_H_LOOP

  dec hl
  dec hl
  POP BC
  DJNZ CM_V_LOOP

RET

DRAW_MAP_FULL
 LD B,22
 LD HL, MAP21+39

DMF_V_LOOP ; loop 22 times using b - 21 to 0
  LD C,B ; backup ver
  LD B,40 ; reset hor

    LD IXH,C
    DEC IXH

DMF_H_LOOP ; loop 38 times using b - 39 to 0
    LD A,(HL)
    LD IXL,B
    DEC IXL
;    LD IXH,C
;    DEC IXH

    EXX
    CALL DRAW_CHAR
    EXX

   DEC HL
   DJNZ DMF_H_LOOP
  LD B,C
  DJNZ DMF_V_LOOP

RET

DRAW_MAP
 LD B,20
 LD HL, MAP20+38

DM_V_LOOP ; loop 22 times using b - 21 to 0
  LD C,B ; backup ver
  LD B,38 ; reset hor
   LD IXH,C

DM_H_LOOP ; loop 38 times using b - 39 to 0
    LD A,(hl)
    LD IXL,B
;    LD IXH,C

    EXX
    CALL DRAW_CHAR
    EXX

   DEC hl
   DJNZ DM_H_LOOP
  DEC HL
  DEC HL
  LD B,C
  DJNZ DM_V_LOOP

RET

DIR_H    DEFB 0
DIR_V    DEFB 0
PLAYER_H DEFB 10
PLAYER_V DEFB 10

; keys = port bit 0   1   2 3 4
;        fefe     sht z   x c v
;        fdfe     a   s   d f g
;        fbfe     q   w   e r t
;        f7fe     1   2   3 4 5
;        effe     0   9   8 7 6
;        dffe     p   o   1 u y
;        bffe     ent l   k j h
;        7ffe     spc sym m n b

KEYBOARD

 LD D, 0
 LD E, D

 LD BC,$FBFE     ; Load BC with the row port address
 IN A,(C)        ; Read the port into the accumulator
 AND $01         ; q
 JP NZ,Q_KEY_N   ; not pressed
  DEC D
  LD (DIR_H), A
Q_KEY_N

 LD BC,$DFFE
 IN A,(C)
 AND $01         ; p
 JP NZ,P_KEY_N
  INC D
  LD (DIR_H), A
P_KEY_N

 LD BC,$FDFE
 IN A,(C)
 AND $01         ; a
 JP NZ,Z_KEY_N
  INC E
  LD (DIR_V), A
Z_KEY_N

 LD BC,$f7FE
 IN A,(C)
 AND $01         ; 1
 JP NZ,M_KEY_N
  DEC E
  LD (DIR_V), A
M_KEY_N

 LD A, D
 LD (DIR_H), A
 LD A, E
 LD (DIR_V), A

 RET


V_BLANK
 LD DE,$1140       ; attr into D, MSB of port addr into E
 LD A,D
 LD ($5ae0), A
 LD ($5ae1), A
FB_LP
  INC HL          ; padding instruction
  LD A,E          ; MSB of port addr into A
  IN A,($ff)      ; read port 0x40FF into A
  CP D            ; is it D (i.e. INK 1, PAPER 1, BRIGHT 0; FLASH 0)?
  JP NZ,FB_LP     ; no? keep trying
RET

; IXH = vpos
; IXL = hpos
; A = char

DRAW_CHAR
 LD E,IXL
 LD D,IXH
 LD L,D

 ex af,af' ; backup char

 LD D, HIGH SCRH  ; HOR CONVERSION
 LD A, (DE)       ; get hor pos

 LD H, HIGH SCCH2 ; SCREEN CHAR HI
 LD b,(HL) ; T7 ; GET HI BYTE
 LD H, HIGH SCCL2 ; SCREEN CHAR LO
 ADD a,(hl) ; T7 ; GET LO BYTE
 LD c,A

 ld h, high DRAW_CHAR_0 ; HIGH START ADDRESS IS ALIGNED
 ld d, high SCRDRWLO    ; GET LOW START ADDRESS
 ld a,(de)
 ld l,a

 ex af,af' ; restore char
 add a,a ; *2
 add a,a ; *4
 add a,a ; *8

 jp (hl)

ALIGN $100
DRAW_CHAR_0
 ld l,a
 ld h, high CHAR_0
 ld d,%00000011

 LD (DRAW_CHAR_0_SP+1),SP
 LD SP,HL

 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

DRAW_CHAR_0_SP
 LD SP,$ABCD

RET

DRAW_CHAR_6
 ld l,a
 ld h, high CHAR_6
 ld d,%11000000

 LD (DRAW_CHAR_6_SP+1),SP
 LD SP,HL

 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc b
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

DRAW_CHAR_6_SP
 LD SP,$ABCD

RET

DRAW_CHAR_2
 add a,a ; *16
 ld l,a
 ld h, high CHAR_2

 ld de,%1111110000001111

 LD (DRAW_CHAR_2_SP+1),SP
 LD SP,HL

 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

DRAW_CHAR_2_SP
 LD SP,$ABCD

RET

DRAW_CHAR_4
 add a,a ; *16
 ld l,a
 ld h, high CHAR_4

 ld de,%1111000000111111

 LD (DRAW_CHAR_4_SP+1),SP
 LD SP,HL

 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and d
 or  l     ; 4 *
 LD (bc),A
 inc c
 ld a,(bc)
 and e
 or  h     ; 4 *
 LD (bc),A

 inc b
 pop hl    ; 10 *
 ld a,(bc)
 and e
 or  l     ; 4 *
 LD (bc),A
 dec c
 ld a,(bc)
 and d
 or  h     ; 4 *
 LD (bc),A

DRAW_CHAR_4_SP
 LD SP,$ABCD

RET

DIAMOND_BOULDER_MOVE

 ex de,hl ; de = hl + (v+1)
 ld hl,40 ; down
 add hl,de
 ex de,hl

 ld a,(de)
 OR A ; SPACE
 jp z, DIAMOND_BOULDER_MOVE_DOWN

 CP BOULDER ; its a boulder
 jp z, DIAMOND_BOULDER_MOVEMENT_LEFT
 CP DIAMOND ; or a diamond
 jp z, DIAMOND_BOULDER_MOVEMENT_LEFT
 CP WALL ; or a wall
 jp z, DIAMOND_BOULDER_MOVEMENT_LEFT
 CP TITANIUM ; or a permanent wall
 jp z, DIAMOND_BOULDER_MOVEMENT_LEFT

RET

DIAMOND_BOULDER_MOVE_DOWN
    LD (HL), A ; put space in original location
    EX AF,AF' ; restore char
    LD (DE), A ; put char below

    LD IXL,B
    LD IXH,C
    EXX
    INC IXH
    CALL DRAW_CHAR

    OR A ; SPACE
    DEC IXH
    call DRAW_CHAR
    EXX

    RET

DIAMOND_BOULDER_MOVEMENT_LEFT ; if left is space and left below is space move left

 dec hl ; left
 ld a,(hl)
 inc hl ; restore

 OR A ; SPACE
 jp nz, DIAMOND_BOULDER_MOVEMENT_RIGHT ; CM_CONT

; de already holds down? - so just inc de?
; ex de,hl
; ld hl,39 ; down left = 40-1
; add hl,de
; ex de,hl

 dec de ; down left
 ld a,(de)
 inc de
 OR A ; SPACE
 jp nz, DIAMOND_BOULDER_MOVEMENT_RIGHT ; CM_CONT

 LD (HL), A ; put space in original location
 EX AF,AF' ; restore char

 dec HL ; left
 LD (HL), A ; put char left
 inc hl ; restore

    LD IXL,B
    LD IXH,C
    EXX
    DEC IXL
    CALL DRAW_CHAR

    OR A ; SPACE
    INC IXL
    call DRAW_CHAR
    EXX

    dec b
    dec hl

RET ;    jp CM_CONT

DIAMOND_BOULDER_MOVEMENT_RIGHT ; if right is space and right below is space move right

 inc hl ; right
 ld a,(hl)
 dec hl ; restore

 OR A ; SPACE
 jp nz, DIAMOND_BOULDER_MOVEMENT_EXIT ; CM_CONT

 ex de,hl
 ld hl,41 ; down right = 40+1
 add hl,de
 ex de,hl

 ld a,(de)
 OR A ; SPACE
 jp nz, DIAMOND_BOULDER_MOVEMENT_EXIT ; CM_CONT

 LD (HL), A ; put space in original location
 EX AF,AF' ; restore char

 inc hl ; right
 LD (hl), A ; put char right
 dec hl ; restore

    LD IXL,B
    LD IXH,C
    EXX
    INC IXL
    CALL DRAW_CHAR

    OR A ; SPACE
    DEC IXL
    call DRAW_CHAR
    EXX

DIAMOND_BOULDER_MOVEMENT_EXIT
    RET

ALIGN $100
CHAR_4
DEFB %00000000,%00000000 ; SPACE
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000

DEFB %00000111,%00000000 ; BOULDER
DEFB %00000000,%00000101
DEFB %00001000,%10000000
DEFB %10000000,%00001000
DEFB %00001000,%10000000
DEFB %00000000,%00000101
DEFB %00000111,%00000000
DEFB %00000000,%00000000

DEFB %00000010,%00000000 ; DIAMOND
DEFB %00000000,%00000101
DEFB %00000101,%00000000
DEFB %10000000,%00001000
DEFB %00000101,%00000000
DEFB %00000000,%00000101
DEFB %00000010,%00000000
DEFB %00000000,%00000000

DEFB %00000111,%00000000 ; PLAYER
DEFB %00000000,%00000101
DEFB %00001000,%10000000
DEFB %10000000,%00001111
DEFB %00001000,%10000000
DEFB %00000000,%00000101
DEFB %00000111,%00000000
DEFB %00000000,%00000000

;DEFB %00001111,%11000000  ; PLAYER ->
;DEFB %11000000,%00001100  ; <-
;DEFB %00001100,%11000000  ; ->
;DEFB %11000000,%00001100  ; <-
;DEFB %00001100,%11000000  ; ->
;DEFB %11000000,%00001100  ; <-
;DEFB %00001100,%11000000  ; ->
;DEFB %11000000,%00001111  ; <-

DEFB %00001010,%10000000 ; amoeba
DEFB %00000000,%00000101
DEFB %00001010,%10000000
DEFB %00000000,%00000101
DEFB %00001010,%10000000
DEFB %00000000,%00000101
DEFB %00001010,%10000000
DEFB %00000000,%00000000

DEFB %00001001,00000000 ; ground
DEFB %00000000,00000000
DEFB %00000100,10000000
DEFB %00000000,00000000
DEFB %00001001,00000000
DEFB %00000000,00000000
DEFB %00000100,10000000
DEFB %00000000,00000000

DEFB %00001111,%10000000 ; WALL
DEFB %10000000,%00001000
DEFB %00001000,%10000000
DEFB %10000000,%00001000
DEFB %00001000,%10000000
DEFB %10000000,%00001000
DEFB %00001111,%10000000
DEFB %00000000,%00000000

DEFB %00001111,%11000000
DEFB %11000000,%00000000
DEFB %00000000,%11000000
DEFB %11000000,%00000000
DEFB %00000000,%11000000
DEFB %11000000,%00000000
DEFB %00000000,%11000000
DEFB %11000000,%00000000

DEFB %00001111,%11000000
DEFB %11000000,%00001100
DEFB %00001100,%11000000
DEFB %11000000,%00001111
DEFB %00001100,%11000000
DEFB %11000000,%00001100
DEFB %00001100,%11000000
DEFB %11000000,%00001111

DEFB %00001111,%10000000 ; TITANIUM
DEFB %10000000,%00001000
DEFB %00001000,%10000000
DEFB %10000000,%00001010
DEFB %00001000,%10000000
DEFB %10000000,%00001000
DEFB %00001111,%10000000
DEFB %00000000,%00000000

DEFB %00001000,%10000000 ; BUTTERFLY
DEFB %10000000,%00001101
DEFB %00000101,%00000000
DEFB %00000000,%00000010
DEFB %00000101,%00000000
DEFB %10000000,%00001101
DEFB %00001000,%10000000
DEFB %00000000,%00000000

DEFB %00001111,%10000000
DEFB %11000000,%00001100;,%11000000 ;
DEFB %00001100,%11000000
DEFB %10000000,%00001111;,%10000000 ;
DEFB %00001100,%11000000
DEFB %11000000,%00001100;,%11000000 ;
DEFB %00001100,%11000000
DEFB %10000000,%00001111;,%10000000 ;

DEFB %00001101,%10000000 ; FIREFLY?
DEFB %10000000,%00001101
DEFB %00000010,%00000000
DEFB %10000000,%00001111
DEFB %00000010,%00000000
DEFB %10000000,%00001101
DEFB %00001101,%10000000
DEFB %00000000,%00000000

DEFB %00001111,%10000000
DEFB %11000000,%00001100;,%11000000 ;
DEFB %00001100,%11000000
DEFB %11000000,%00001100;,%11000000 ;
DEFB %00001100,%11000000
DEFB %11000000,%00001100;,%11000000 ;
DEFB %00001100,%11000000
DEFB %10000000,%00001111;,%10000000 ;

DEFB %00001111,%11000000
DEFB %00000000,%00001100;,%00000000 ;
DEFB %00001100,%00000000
DEFB %11000000,%00001111;,%11000000 ;
DEFB %00001100,%00000000
DEFB %00000000,%00001100;,%00000000 ;
DEFB %00001100,%00000000
DEFB %11000000,%00001111;,%11000000 ;

DEFB %00001111,%10000000 ; exit
DEFB %10000000,%00001010
DEFB %00001010,%10000000
DEFB %10000000,%00001111
DEFB %00001010,%10000000
DEFB %10000000,%00001010
DEFB %00001111,%10000000
DEFB %00000000,%00000000

ALIGN $100
CHAR_2
DEFB %00000000,%00000000 ; SPACE
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000
DEFB %00000000,%00000000

DEFB %00000001,%11000000 ; BOULDER
DEFB %01000000,%00000001
DEFB %00000010,%00100000
DEFB %00100000,%00000010
DEFB %00000010,%00100000
DEFB %01000000,%00000001
DEFB %00000001,%11000000
DEFB %00000000,%00000000

DEFB %00000000,%10000000 ; DIAMOND
DEFB %01000000,%00000001
DEFB %00000001,%01000000
DEFB %00100000,%00000010
DEFB %00000001,%01000000
DEFB %01000000,%00000001
DEFB %00000000,%10000000
DEFB %00000000,%00000000

DEFB %00000001,%11000000 ; PLAYER
DEFB %01000000,%00000001
DEFB %00000010,%00100000
DEFB %11100000,%00000011
DEFB %00000010,%00100000
DEFB %01000000,%00000001
DEFB %00000001,%11000000
DEFB %00000000,000000000



;DEFB %00000011,%11110000 ; PLAYER ->
;DEFB %00110000,%00000011 ; <-
;DEFB %00000011,%00110000 ; ->
;DEFB %00110000,%00000011 ; <-
;DEFB %00000011,%00110000 ; ->
;DEFB %00110000,%00000011 ; <-
;DEFB %00000011,%00110000 ; ->
;DEFB %11110000,%00000011 ; <-

DEFB %00000010,%10100000 ; amoeba
DEFB %01000000,%00000001
DEFB %00000010,%10100000
DEFB %01000000,%00000001
DEFB %00000010,%10100000
DEFB %01000000,%00000001
DEFB %00000010,%10100000
DEFB %00000000,%00000000

DEFB %00000010,%01000000 ; ground
DEFB %00000000,0
DEFB %00000001,%00100000
DEFB %00000000,0
DEFB %00000010,%01000000
DEFB %00000000,0
DEFB %00000001,%00100000
DEFB %00000000,0

DEFB %00000011,%11100000 ; WALL
DEFB %00100000,%00000010
DEFB %00000010,%00100000
DEFB %00100000,%00000010
DEFB %00000010,%00100000
DEFB %00100000,%00000010
DEFB %00000011,%11100000
DEFB %00000000,%00000000

DEFB %00000011,%11110000 ;
DEFB %00110000,%00000000
DEFB %00000000,%00110000
DEFB %00110000,%00000000
DEFB %00000000,%00110000
DEFB %00110000,%00000000
DEFB %00000000,%00110000
DEFB %00110000,%00000000

DEFB %00000011,%11110000
DEFB %00110000,%00000011
DEFB %00000011,%00110000
DEFB %11110000,%00000011
DEFB %00000011,%00110000
DEFB %00110000,%00000011
DEFB %00000011,%00110000
DEFB %11110000,%00000011

DEFB %00000011,%11100000 ; TITANIUM
DEFB %00100000,%00000010
DEFB %00000010,%00100000
DEFB %10100000,%00000010
DEFB %00000010,%00100000
DEFB %00100000,%00000010
DEFB %00000011,%11100000
DEFB %00000000,%00000000

DEFB %00000010,%00100000 ; BUTTERFLY
DEFB %01100000,%00000011
DEFB %00000001,%01000000
DEFB %10000000,%00000000
DEFB %00000001,%01000000
DEFB %01100000,%00000011
DEFB %00000010,%00100000
DEFB %00000000,%00000000

DEFB %00000011,%11100000
DEFB %00110000,%00000011
DEFB %00000011,%00110000
DEFB %11100000,%00000011
DEFB %00000011,%00110000
DEFB %00110000,%00000011
DEFB %00000011,%00110000
DEFB %11100000,%00000011

DEFB %00000011,%01100000 ; FIREFLY?
DEFB %01100000,%00000011
DEFB %00000000,%10000000
DEFB %11100000,%00000011
DEFB %00000000,%10000000
DEFB %01100000,%00000011
DEFB %00000011,%01100000
DEFB %00000000,%00000000

DEFB %00000011,%11100000
DEFB %00110000,%00000011;,%00110000 ;
DEFB %00000011,%00110000
DEFB %00110000,%00000011;,%00110000 ;
DEFB %00000011,%00110000
DEFB %00110000,%00000011;,%00110000 ;
DEFB %00000011,%00110000
DEFB %11100000,%00000011;,%11100000 ;

DEFB %00000011,%11110000
DEFB %00000000,%00000011;,%00000000 ;
DEFB %00000011,%00000000
DEFB %11110000,%00000011;,%11110000 ;
DEFB %00000011,%00000000
DEFB %00000000,%00000011;,%00000000 ;
DEFB %00000011,%00000000
DEFB %11110000,%00000011;,%11110000 ;

DEFB %00000011,%11100000 ; exit
DEFB %10100000,%00000010
DEFB %00000010,%10100000
DEFB %11100000,%00000011
DEFB %00000010,%10100000
DEFB %10100000,%00000010
DEFB %00000011,%11100000
DEFB %00000000,%00000000

ALIGN $100
CHAR_0
DEFB %00000000 ; SPACE
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000

DEFB %01110000 ; BOULDER
DEFB %01010000
DEFB %10001000
DEFB %10001000
DEFB %10001000
DEFB %01010000
DEFB %01110000
DEFB %00000000

DEFB %00100000 ; DIAMOND
DEFB %01010000
DEFB %01010000
DEFB %10001000
DEFB %01010000
DEFB %01010000
DEFB %00100000
DEFB %00000000

DEFB %01110000 ; PLAYER
DEFB %01010000
DEFB %10001000
DEFB %11111000
DEFB %10001000
DEFB %01010000
DEFB %01110000
DEFB %00000000

DEFB %10101000 ; amoeba
DEFB %01010000
DEFB %10101000
DEFB %01010000
DEFB %10101000
DEFB %01010000
DEFB %10101000
DEFB %00000000

DEFB %10010000 ; ground
DEFB %00000000
DEFB %01001000
DEFB %00000000
DEFB %10010000
DEFB %00000000
DEFB %01001000
DEFB %00000000

DEFB %11111000 ; WALL
DEFB %10001000
DEFB %10001000
DEFB %10001000
DEFB %10001000
DEFB %10001000
DEFB %11111000
DEFB %00000000

DEFB %11011000
DEFB %11011000
DEFB %00100000
DEFB %11111000
DEFB %00100000
DEFB %11011000
DEFB %11011000
DEFB %00000000

DEFB %11111100
DEFB %11001100
DEFB %11001100
DEFB %11111100
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11111100

DEFB %11111000 ; TITANIUM
DEFB %10001000
DEFB %10001000
DEFB %10101000
DEFB %10001000
DEFB %10001000
DEFB %11111000
DEFB %00000000

DEFB %10001000 ; BUTTERFLY
DEFB %11011000
DEFB %01010000
DEFB %00100000
DEFB %01010000
DEFB %11011000
DEFB %10001000
DEFB %00000000

DEFB %11111000
DEFB %11001100
DEFB %11001100
DEFB %11111000
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11111000

DEFB %11011000 ; FIREFLY?
DEFB %11011000
DEFB %00100000
DEFB %11111000
DEFB %00100000
DEFB %11011000
DEFB %11011000
DEFB %00000000

DEFB %11111000
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11001100
DEFB %11111000

DEFB %11111100
DEFB %11000000
DEFB %11000000
DEFB %11111100
DEFB %11000000
DEFB %11000000
DEFB %11000000
DEFB %11111100

DEFB %11111000 ; exit
DEFB %10101000
DEFB %10101000
DEFB %11111000
DEFB %10101000
DEFB %10101000
DEFB %11111000
DEFB %00000000

ALIGN $100
CHAR_6
DEFB %00000000 ; SPACE
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000
DEFB %00000000

DEFB %00011100 ; BOULDER
DEFB %00010100
DEFB %00100010
DEFB %00100010
DEFB %00100010
DEFB %00010100
DEFB %00011100
DEFB %00000000

DEFB %00001000 ; DIAMOND
DEFB %00010100
DEFB %00010100
DEFB %00100010
DEFB %00010100
DEFB %00010100
DEFB %00001000
DEFB %00000000

DEFB %00011100 ; PLAYER
DEFB %00010100
DEFB %00100010
DEFB %00111110
DEFB %00100010
DEFB %00010100
DEFB %00011100
DEFB %00000000

DEFB %00101010 ; amoeba
DEFB %00010100
DEFB %00101010
DEFB %00010100
DEFB %00101010
DEFB %00010100
DEFB %00101010
DEFB %00000000

DEFB %00100100 ; ground
DEFB %00000000
DEFB %00010010
DEFB %00000000
DEFB %00100100
DEFB %00000000
DEFB %00010010
DEFB %00000000

DEFB %00111110 ; WALL
DEFB %00100010
DEFB %00100010
DEFB %00100010
DEFB %00100010
DEFB %00100010
DEFB %00111110
DEFB %00000000

DEFB %00111111
DEFB %00000011
DEFB %00000011
DEFB %00000011
DEFB %00000011
DEFB %00000011
DEFB %00000011
DEFB %00000011

DEFB %00111111
DEFB %00110011
DEFB %00110011
DEFB %00111111
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00111111

DEFB %00111110 ; TITANIUM
DEFB %00100010
DEFB %00100010
DEFB %00101010
DEFB %00100010
DEFB %00100010
DEFB %00111110
DEFB %00000000

DEFB %00100010 ; BUTTERFLY
DEFB %00110110
DEFB %00010100
DEFB %00001000
DEFB %00010100
DEFB %00110110
DEFB %00100010
DEFB %00000000

DEFB %00111110
DEFB %00110011
DEFB %00110011
DEFB %00111110
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00111110

DEFB %00110110 ; FIREFLY?
DEFB %00110110
DEFB %00001000
DEFB %00111110
DEFB %00001000
DEFB %00110110
DEFB %00110110
DEFB %00000000

DEFB %00111110
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00110011
DEFB %00111110

DEFB %00111111
DEFB %00110000
DEFB %00110000
DEFB %00111111
DEFB %00110000
DEFB %00110000
DEFB %00110000
DEFB %00111111

DEFB %00111110 ; exit
DEFB %00101010
DEFB %00101010
DEFB %00111110
DEFB %00101010
DEFB %00101010
DEFB %00111110
DEFB %00000000

ALIGN $100
SCRH
DEFB 0+0,0+0,0+1,0+2
DEFB 3+0,3+0,3+1,3+2
DEFB 6+0,6+0,6+1,6+2
DEFB 9+0,9+0,9+1,9+2
DEFB 12+0,12+0,12+1,12+2
DEFB 15+0,15+0,15+1,15+2
DEFB 18+0,18+0,18+1,18+2
DEFB 21+0,21+0,21+1,21+2
DEFB 24+0,24+0,24+1,24+2
DEFB 27+0,27+0,27+1,27+2

ALIGN $100
SCRDRWLO
DEFB DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255, DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255
DEFB DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255, DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255
DEFB DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255, DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255
DEFB DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255, DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255
DEFB DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255, DRAW_CHAR_0&255, DRAW_CHAR_2&255, DRAW_CHAR_4&255, DRAW_CHAR_6&255

ALIGN $100
SCCH2
 DEFB (SCREEN+(0*2048)+(0*256)+(0*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(1*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(2*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(3*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(4*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(5*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(6*32))/256
 DEFB (SCREEN+(0*2048)+(0*256)+(7*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(0*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(1*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(2*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(3*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(4*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(5*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(6*32))/256
 DEFB (SCREEN+(1*2048)+(0*256)+(7*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(0*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(1*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(2*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(3*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(4*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(5*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(6*32))/256
 DEFB (SCREEN+(2*2048)+(0*256)+(7*32))/256

ALIGN $100
SCCL2
 DEFB (SCREEN+(0*2048)+(0*256)+(0*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(1*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(2*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(3*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(4*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(5*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(6*32))&255
 DEFB (SCREEN+(0*2048)+(0*256)+(7*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(0*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(1*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(2*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(3*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(4*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(5*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(6*32))&255
 DEFB (SCREEN+(1*2048)+(0*256)+(7*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(0*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(1*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(2*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(3*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(4*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(5*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(6*32))&255
 DEFB (SCREEN+(2*2048)+(0*256)+(7*32))&255

ALIGN $100
MAPHI
 DEFB MAP00/256,MAP01/256,MAP02/256,MAP03/256,MAP04/256,MAP05/256,MAP06/256,MAP07/256,MAP08/256,MAP09/256,MAP10/256
 DEFB MAP11/256,MAP12/256,MAP13/256,MAP14/256,MAP15/256,MAP16/256,MAP17/256,MAP18/256,MAP19/256,MAP20/256,MAP21/256

ALIGN $100
MAPLO
 DEFB MAP00&255,MAP01&255,MAP02&255,MAP03&255,MAP04&255,MAP05&255,MAP06&255,MAP07&255,MAP08&255,MAP09&255,MAP10&255
 DEFB MAP11&255,MAP12&255,MAP13&255,MAP14&255,MAP15&255,MAP16&255,MAP17&255,MAP18&255,MAP19&255,MAP20&255,MAP21&255

MAP      ;  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
MAP00 DEFB TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW ;  1
MAP01 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ;  2
MAP02 DEFB TW,S,S,S,WL,WL,WL,WL,S,S,S,TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,DM,DM,DM,DM,S,S,S,S,S,S,S,S,TW ;  3
MAP03 DEFB TW,S,BD,S,S,S,S,WL,S,S,S,TW,TW,TW,TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,DM,S,S,S,S,S,S,S,S,TW ;  4
MAP04 DEFB TW,S,BD,S,S,S,S,WL,S,S,S,TW,S,S,TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,DM,S,S,S,S,S,S,S,S,TW ;  5
MAP05 DEFB TW,S,BD,BD,BD,BD,S,WL,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ;  6
MAP06 DEFB TW,S,BD,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,PL,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ;  7
MAP07 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,PL,PL,PL,PL,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ;  8
MAP08 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,PL,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ;  9
MAP09 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ; 10
MAP10 DEFB TW,S,S,S,S,S,S,S,S,S,X,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ; 11
MAP11 DEFB TW,S,S,S,S,S,S,S,X,X,X,X,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,AM,AM,AM,AM,S,S,S,TW ; 12
MAP12 DEFB TW,S,S,S,S,S,S,S,S,S,X,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,AM,S,S,S,S,S,S,TW ; 13
MAP13 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,G,S,S,S,S,S,S,S,S,S,S,S,S,S,AM,S,S,S,S,S,S,TW ; 14
MAP14 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,G,G,G,G,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ; 15
MAP15 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,G,S,S,S,S,S,S,S,S,S,WL,S,S,S,S,S,S,S,S,S,S,TW ; 16
MAP16 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,WL,S,S,S,S,GR,S,S,S,S,S,TW ; 17
MAP17 DEFB TW,S,S,S,S,S,S,S,S,S,ET,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,WL,WL,WL,S,GR,GR,GR,GR,S,S,S,S,TW ; 18
MAP18 DEFB TW,S,S,S,S,S,S,S,ET,ET,ET,ET,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,GR,S,S,S,S,S,S,TW ; 19
MAP19 DEFB TW,S,S,S,S,S,S,S,S,S,ET,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ; 20
MAP20 DEFB TW,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,S,TW ; 21
MAP21 DEFB TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW,TW ; 22

STACK ; workaround as stack was overwriting buffer
 DEFS 4096,0

MEMTOP
 DEFW  0

; Stop planting code after this. (When generating a tape file we save bytes below here).

; AppLast                           EQU *                                    ; The last used byte's address.

; Setup the emulation registers, so Zeus can emulate this code correctly.
Zeus_PC EQU START  ; Tell the emulator where to start.
Zeus_SP EQU MEMTOP ; Tell the emulator where to put the stack.

